import{_ as i,c as a,o as n,ag as p}from"./chunks/framework.C9UQ_rae.js";const l="/nextxh/assets/1743331274537.oRJ7JTnh.png",t="/nextxh/assets/1743420913258.BHnsMqZe.png",h="/nextxh/assets/1743464046201.BcnZbdp1.png",k="/nextxh/assets/1743493324923.CYUtgZja.png",e="/nextxh/assets/1743494026895.DPAZSEh8.png",d="/nextxh/assets/1743497787442.DH1U2EF3.png",r="/nextxh/assets/1743569510942.BKJNVNEP.png",A=JSON.parse('{"title":"c语言","description":"","frontmatter":{},"headers":[],"relativePath":"c/c语言.md","filePath":"c/c语言.md","lastUpdated":null}'),E={name:"c/c语言.md"};function g(c,s,y,o,F,u){return n(),a("div",null,s[0]||(s[0]=[p(`<h1 id="c语言" tabindex="-1">c语言 <a class="header-anchor" href="#c语言" aria-label="Permalink to &quot;c语言&quot;">​</a></h1><h4 id="初始c语言" tabindex="-1">初始c语言 <a class="header-anchor" href="#初始c语言" aria-label="Permalink to &quot;初始c语言&quot;">​</a></h4><p><img src="https://s2.loli.net/2025/03/28/XdVwIlPEBHtCGzf.png" alt="image.png"></p><p>编辑器：编辑功能</p><p>编译器：编译功能-&gt;c/c++是编译型语言</p><h4 id="第一个c语言" tabindex="-1">第一个c语言 <a class="header-anchor" href="#第一个c语言" aria-label="Permalink to &quot;第一个c语言&quot;">​</a></h4><blockquote><p>c语言一定要有main函数,为主函数:</p></blockquote><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//std-标准 i-input o-output</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//用来告诉编译器,使用了库函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //main函数是程序的入口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //printf是一个库函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //如果正常运行,就返回0,不正常就返回非零数值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//int是整型类型的意思</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//快捷键:运行-&gt;ctrl+fn+f5</span></span></code></pre></div><h4 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h4><blockquote><p>char字符串数据类型-一个字节</p><p>short短整型 -两个字节</p><p>int整形-四个字节</p><p>long长整型-四个字节</p><p>sizeof(long)&gt;=sizeof(int)</p><p>long long更长的整型-八个字节</p><p>float单精度浮点数-四个字节</p><p>double双精度浮点数-八个字节</p><p>使用类型的原因是向内存申请一个空间</p></blockquote><ul><li>计算机单位: <ul><li>bit:比特位,最小,八个比特位是一个字节</li><li>byte:字节,1024个字节是一个kb</li><li>kb</li><li>mb</li><li>gb</li><li>tb</li><li>pb</li></ul></li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;w&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span></span></code></pre></div><h4 id="常量和变量" tabindex="-1">常量和变量 <a class="header-anchor" href="#常量和变量" aria-label="Permalink to &quot;常量和变量&quot;">​</a></h4><p>常量tm就是不变的量</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //全局变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//声明来自外部的符号</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text--&gt;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,a)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //局部变量,局部和全局冲突的时候,局部优先</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> %d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num1,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //这个方法要输入地址,可能会报错这个函数不安全</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//不要将全局和局部变量的名字写出一样的</span></span></code></pre></div><ul><li><p>变量的作用域和生命周期</p><ul><li><p>局部变量的作用域是变量所在的局部范围,全局变量的作用域是整个工程</p><p>限定整个名字可用性的是变量所在的作用域</p></li><li><p>生命周期:局部变量的生命周期:进入作用域开始,出作用域结束.全局变量的生命周期:整个程序的生命周期</p></li><li><p>作用域和生命周期是有点关系的</p></li></ul></li><li><p>常量：描述不变的量</p><ul><li><p>字面常量</p><blockquote><p>a = 10</p></blockquote></li><li><p>cons定义的常变量</p><blockquote><p>const int a = 10本质上是一个变量，但不能直接被修改，有常量的属性</p></blockquote></li><li><p>#define定义的标识符常量</p></li><li><p>枚举常量</p></li></ul></li><li><p><strong>字符串：</strong></p><p>“sasdad”这种双引号引起来的一串字符称为字符串字面量，或者简称字符串 字符串的结束标志是一个|0的转义字符,在计算字符串长度的时候|0是结束标志,不算字符串内容</p><p>c语言并没有字符串类型，只有字符类型</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aedsfsdd&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    strlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//求长度的函数,返回数字</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    strlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//8</span></span></code></pre></div><p><img src="`+l+'" alt="74333127453"></p><p>arr2后面没有|0，导致在内存中继续往下打印，生成了无关的东西。\\0是结束标志</p></li><li><p><strong>转义字符:</strong></p><p>即转变字符的意思,如:</p><ul><li><p>\\n换行</p></li><li><p>\\0结束</p></li><li><p>?在书写连续多个问好时使用,防止他们被解析成三字母词</p></li><li><p>&#39;用来表示字符常量&#39;和&quot;一样</p></li><li><p>\\用来表示一个反斜杠,防止他被解释为一个转义序列符</p></li><li><p>\\a警告字符,蜂鸣</p></li><li><p>\\b退格符</p><p>\\f进纸符</p></li><li><p>\\r回车符</p></li><li><p>\\t水平制表符</p></li><li><p>\\v垂直制表符</p></li><li><p>\\ddd表示1-3八进制的数字,如:\\130x(八进制是0-7)</p></li><li><p>\\xdd dd表示2个十六进制数字,如:\\x30 0</p></li><li><p>把他们转义成十进制的转义字符</p></li><li><p>现在已经没有三字母词了,不转义的三字母词会出现方块</p><p>​</p></li></ul><blockquote><p>打印的特殊情况</p><p>%d-打印整型</p><p>%c-打印字符</p><p>%s-打印字符串</p><p>%f-打印float类型的数据</p><p>%lf-打印doublr类型的数据</p><p>只有字符串可以省略一些打印方式,其他要严格使用</p></blockquote><p>​</p><ul><li>编码: <ul><li>ascll编码:把字符转化成十进制数字再转换成二进制数字</li></ul></li></ul></li><li><p>**注释:**不需要的代码删掉或者注释掉,代码太难可以写注释来解释</p><ul><li>// 可以嵌套</li><li>/**/ 不能嵌套注释</li></ul></li><li><p><strong>学习方法：</strong></p><p><img src="'+t+`" alt="74342091325"></p></li><li><p><strong>选择语句：</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">（条件作判断）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//相关语句</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//相关语句</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxx</span></span></code></pre></div></li><li><p><strong>循环语句:</strong></p><ul><li><p>while循环</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;写代码&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>​</p></li><li><p>for循环</p></li><li><p>do....while循环</p></li></ul></li><li><p>**函数：**简化代码,复用代码</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Add（</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y）{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n1,n2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,sum)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>**数组:**一组相同类型的元素的集合</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//数组的大小被限制了</span></span></code></pre></div></li><li><p><strong>操作符:</strong></p><ul><li><p>算数操作符:+ - * / %</p><blockquote><p>%是取余,/是除</p><p>除号两端是整数,执行整数除法,如果两边又一个浮点数的话,就执行浮点数除法</p><p>a+=3\\a-=3</p></blockquote></li><li><p>移位操作符&gt;&gt; &lt;&lt;</p></li><li><p>位操作符:&amp; ^ |</p></li><li><p>赋值操作符:= += -= *= /= ^= != &gt;&gt;= &lt;&lt;=</p></li><li><p>单目操作符:</p><blockquote><p><img src="`+h+'" alt="74346404620"></p><p>sizeof计算数组的话,就是计算整个数组的大小</p><p>++/--先把值赋给b,再去加加减减(后置)</p><p>前置++/--就是先加加/减减再去使用</p><p>int a =(int)3.14强制类型转换</p></blockquote></li><li><p>关系操作符:&gt; &gt;= &lt; &lt;= != ==</p></li><li><p>逻辑操作符:&amp;&amp; ||</p></li><li><p>条件操作符:三元表达式x?c:d</p></li><li><p>逗号表达式:a,x,x,...ssss</p><p>是一串逗号隔开的一串表达式,从左向右依次计算 ,整个表达式的结果是最后一个表达式的结果</p></li></ul></li><li><p><strong>常见关键字:</strong></p><p>是c语言内置的，关键字不是自己创建的</p><p><img src="'+k+'" alt="74349332492"></p><p>变量的名字不能是关键字</p></li></ul><p><img src="'+e+`" alt="74349402689"></p><ul><li><p>typedef和static:</p><blockquote><p>typedef就是类型重命名,即类型定义</p></blockquote><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//uint是别名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> main{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>static是用来修饰变量和函数</p><ol><li><p>修饰局部变量，成为静态局部函数</p></li><li><p>修饰全局变量，成为静态全局函数</p></li><li><p>修饰函数，成为静态函数</p></li><li><p><img src="`+d+'" alt="74349778744"></p></li><li><p>这个函数在调用后不会初始化，本质上是static修饰局部变量的说话，局部变量出了作用域，不销毁的。修饰局部变量的时候，改变了变量的存储位置</p></li><li><p>​ void text(){}表示这个函数不需要返回</p></li><li><p>全局变量：使用extent声明一个变量(函数)再使用，被static修饰的全局变量的外部连接属性就变成了内部属性，其他源文件（.c）不能使用全局变量</p><p>函数也是有外部连接属性的</p><p><img src="'+r+'" alt="74356951094"></p></li><li><p>regesiter 寄存器关键字:建议变量存放在寄存器中,这样访问会更快,编译器会决定是否将数据防在寄存器中,防止挤爆寄存器(寄存器会自动把变量放在寄存器里面)</p></li></ol><p>电脑储存设备:寄存器,高速缓存,内存,硬盘(最大,速度较慢,造价低)</p></blockquote></li><li><p><strong>#define定义宏:</strong></p><p>​</p></li></ul>',18)]))}const D=i(E,[["render",g]]);export{A as __pageData,D as default};
